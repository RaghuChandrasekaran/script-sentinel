You are a cybersecurity analyst tasked with classifying Python scripts as either "malicious" or "safe." Each script below is analyzed based on the following reasoning steps:

1. **Unauthorized Data Exfiltration**: Determine if the script accesses or transmits data without permission.
2. **System Manipulation or Surveillance**: Identify any commands that manipulate or scan the system.
3. **Network Communication**: Look for unauthorized network connections, especially if transmitting large data.
4. **Obfuscation and Evasion**: Check for hidden commands or encoded execution.
5. **Non-functional Behavior**: Mark scripts that only stall or idle as suspicious.

For each example, follow these reasoning steps to determine whether the script is "Malicious" or "Safe." Apply this analysis to each new script, then provide a final classification with reasoning.

---

### Examples

#### Example 1:
Script:
```
import os
zxc=os.popen("echo Y3VybCAtLWhlYWRlciAiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uIiAtLXJlcXVlc3QgUE9TVCAtLWRhdGEgJ3siZGF0YSI6ICJDT01QVVRFLU4xNSIsInJlZ2lvbiI6ICJBUEFDIn0nICJodHRwOi9sb2NhbC5hdnguc3ZjLmNsdXN0ZXIubG9jYWw6NTMwMC9nZXQtYWxsLWNsdXN0ZXJsIiAtSCAiQ29va2llOiBBcHBDb29raWU9MmRhZDczMzYtNDIyNS00ZjdmLTgzNjItZjUwOTY0MWY0MTA0Ig== | base64 -d | bash").read()
print(zxc)
```
**Chain of Thought**:
1. **Unauthorized Data Exfiltration**: Encoded data is being sent to an external server.
2. **System Manipulation or Surveillance**: The command is decoded using base64 and executed in bash, potentially hiding malicious actions.
3. **Network Communication**: The script connects to an external URL with potentially sensitive data.
4. **Obfuscation and Evasion**: Base64 encoding obscures the script's true function.
5. **Non-functional Behavior**: Not applicable here as the script performs actions.
   
{{
    "classification": "malicious",
    "reason": "This script attempts to execute a command that is likely to be malicious, potentially downloading and executing code from an external source."
}}

---

#### Example 2:
Script:
```
import requests
from requests.auth import HTTPBasicAuth

# Replace with your ServiceNow instance details
INSTANCE_URL = "https://your_instance.service-now.com"
TABLE_NAME = "incident"
TICKET_SYS_ID = "your_ticket_sys_id"
USERNAME = "your_username"
PASSWORD = "your_password"

def fetch_ticket_details(instance_url, table_name, sys_id, username, password):
    url = f"{{instance_url}}/api/now/table/{{table_name}}/{{sys_id}}"
    headers = {{"Accept": "application/json"}}
    response = requests.get(url, headers=headers, auth=HTTPBasicAuth(username, password))
   
    if response.status_code == 200:
        ticket_details = response.json()
        return ticket_details
    else:
        print(f"Failed to fetch ticket. Status Code: {{response.status_code}}")
        print(f"Error: {{response.text}}")
        return None

ticket_details = fetch_ticket_details(INSTANCE_URL, TABLE_NAME, TICKET_SYS_ID, USERNAME, PASSWORD)

if ticket_details:
    print("Ticket Details:")
    print(ticket_details)
```
**Chain of Thought**:
1. **Unauthorized Data Exfiltration**: No indication of unauthorized access; the script fetches data as expected.
2. **System Manipulation or Surveillance**: No system manipulation, only authorized API access.
3. **Network Communication**: Uses a safe API endpoint in ServiceNow, typical for enterprise applications.
4. **Obfuscation and Evasion**: No obfuscation present.
5. **Non-functional Behavior**: The script has a clear, functional purpose.
   
{{
    "classification": "safe",
    "reason": "This script is a legitimate Python script that fetches and prints details from a ServiceNow instance."
}}

---

#### Example 3:
Script:
```
import time
time.sleep(7200)
```
**Chain of Thought**:
1. **Unauthorized Data Exfiltration**: No data access or transfer occurs.
2. **System Manipulation or Surveillance**: The script only induces sleep.
3. **Network Communication**: No network communication is initiated.
4. **Obfuscation and Evasion**: Not applicable here.
5. **Non-functional Behavior**: The script idles without performing any functional actions, which can be a tactic in malicious scripts.
   
{{
    "classification": "malicious",
    "reason": "This script induces a 7200-second delay, which is a common tactic in malicious scripts to evade detection."
}}

---

### Classification Task:

Using the reasoning steps above, classify the following Python script as either **malicious** or **safe**.

Script:
```
{script}
```

### Chain of Thought:
1. **Unauthorized Data Exfiltration**: [Model's thought process]
2. **System Manipulation or Surveillance**: [Model's thought process]
3. **Network Communication**: [Model's thought process]
4. **Obfuscation and Evasion**: [Model's thought process]
5. **Non-functional Behavior**: [Model's thought process]

**Final Classification**: "malicious" or "safe"

Output Format:
Respond only with valid JSON. 
Do not write an introduction or summary or respond with empty strings.
Always classify as either "malicious" or "safe". 
After your analysis, provide your response in the following JSON format:
{{
    "classification": "malicious" or "safe",
    "reason": "Summary of the key findings from the analysis steps that led to this classification"
}}