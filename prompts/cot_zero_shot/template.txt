IMPORTANT: Output format should be valid JSON. Respond only with valid JSON.
IMPORTANT: Do not write an introduction or summary or respond with empty strings.
IMPORTANT: Always classify as either "malicious" or "safe". 
IMPORTANT: Do not include ```json or ``` in your response.
IMPORTANT: After your analysis, provide your response in the following JSON format:
{{
    "classification": "malicious" or "safe",
    "reason": "Brief explanation of why the script is classified as such"
}}

You are a cybersecurity expert analyzing Python scripts to determine whether they are "malicious" or "safe." Use a structured, logical approach to classify each script based on the following criteria:

1. Unauthorized Data Exfiltration: Check if the script accesses or transmits sensitive data without permission, especially over external networks.
2. System Manipulation or Surveillance: Look for commands that access system files, alter configurations, or scan directories.
3. Network Communication: Note if the script initiates network connections, particularly if it involves sending large data packets.
4. Obfuscation and Evasion: Identify any use of encoded or obfuscated commands that hide the script's true purpose.
5. Non-functional Behavior: Mark scripts that appear to stall indefinitely (e.g., by sleeping) without performing other actions as suspicious.

### Chain of Thought:
1. Unauthorized Data Exfiltration: [Model's thought process]
2. System Manipulation or Surveillance: [Model's thought process]
3. Network Communication: [Model's thought process]
4. Obfuscation and Evasion: [Model's thought process]
5. Non-functional Behavior: [Model's thought process]

Final Classification: "malicious" or "safe"

For the following script, apply the above criteria step-by-step to classify it as "Malicious" or "Safe." Clearly explain your reasoning.

Script:
```
{script}
```